// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveFrontL;
std::shared_ptr<frc::SpeedController> RobotMap::driveBackL;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveLeftGroup;
std::shared_ptr<frc::SpeedController> RobotMap::driveFrontR;
std::shared_ptr<frc::SpeedController> RobotMap::driveBackR;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveRightGroup;
std::shared_ptr<frc::DifferentialDrive> RobotMap::driveDifferential;
std::shared_ptr<frc::SpeedController> RobotMap::ballinFlipper;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveFrontL.reset(new frc::Spark(0));
    lw->AddActuator("Drive", "FrontL", std::static_pointer_cast<frc::Spark>(driveFrontL));
    
    driveBackL.reset(new frc::Spark(1));
    lw->AddActuator("Drive", "BackL", std::static_pointer_cast<frc::Spark>(driveBackL));
    
    driveLeftGroup = std::make_shared<frc::SpeedControllerGroup>(*driveFrontL, *driveBackL  );
    lw->AddActuator("Drive", "LeftGroup", driveLeftGroup);
    
    driveFrontR.reset(new frc::Spark(2));
    lw->AddActuator("Drive", "FrontR", std::static_pointer_cast<frc::Spark>(driveFrontR));
    
    driveBackR.reset(new frc::Spark(3));
    lw->AddActuator("Drive", "BackR", std::static_pointer_cast<frc::Spark>(driveBackR));
    
    driveRightGroup = std::make_shared<frc::SpeedControllerGroup>(*driveFrontR, *driveBackR  );
    lw->AddActuator("Drive", "RightGroup", driveRightGroup);
    
    driveDifferential.reset(new frc::DifferentialDrive(*driveLeftGroup, *driveRightGroup));
    lw->AddActuator("Drive", "Differential", driveDifferential);
    driveDifferential->SetSafetyEnabled(true);
        driveDifferential->SetExpiration(0.1);
        driveDifferential->SetMaxOutput(1.0);

    ballinFlipper.reset(new frc::Spark(5));
    lw->AddActuator("Ballin", "Flipper", std::static_pointer_cast<frc::Spark>(ballinFlipper));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
